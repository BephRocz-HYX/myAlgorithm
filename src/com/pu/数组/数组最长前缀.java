package com.pu.数组;

import java.util.Stack;

/**
 * description：
 *
 * @author Pubojian
 * @date 2020/2/14 17:05
 */
public class 数组最长前缀 {
    /**
     * @param X: a integer
     * @param Y: a integer
     * @param nums: a list of integer
     * @return: return the maximum index of largest prefix
     */
    public static void main(String[] args) {
        int[] nums = {16,21,92,54,35,2,18,10,39,44,32,46,74,52,22,4,88,88,96,12,96,95,37,94,30,1,27,24,96,17,92,22,30,29,34,36,40,40,10,72,64,99,65,71,14,17,80,58,77,6,67,52,33,96,57,63,17,38,45,52,66,8,16,56,31,12,99,8,93,35,29,82,47,21,21,72,14,31,9,65,49,67,98,76,38,17,59,96,50,35,23,43,91,71,37,9,48,21,44,74,38,33,98,40,14,1,93,32,24,39,15,3,58,74,33,43,40,97,48,81,34,35,96,90,62,90,76,52,52,85,17,48,52,93,22,87,89,59,88,75,79,55,16,86,71,50,89,81,86,51,49,13,30,48,59,5,1,75,23,30,98,94,100,94,57,70,47,68,60,38,100,69,72,48,7,41,82,47,55,67,91,35,27,32,92,95,9,64,96,12,47,80,34,65,39,20,19,34,46,5,95,8,51,40,16,59,30,24,99,24,75,68,80,27,52,9,67,78,71,14,73,56,54,71,23,3,28,50,95,85,62,30,36,54,87,12,74,34,45,26,53,49,91,29,99,74,67,100,76,44,99,15,29,25,14,6,42,74,62,38,42,40,90,9,63,91,60,22,29,26,66,92,55,13,65,33,35,86,78,98,36,19,29,80,30,69,98,45,48,58,5,43,37,32,5,27,34,6,76,84,88,1,59,7,20,39,81,36,22,7,19,27,37,43,65,8,39,27,34,66,62,20,6,86,90,20,21,75,73,88,35,49,13,20,20,42,96,98,28,19,38,71,43,30,23,10,23,6,72,13,98,18,72,84,40,47,18,3,73,78,62,91,7,19,33,82,81,10,74,79,57,35,51,13,23,45,68,58,66,31,66,64,97,49,96,49,24,66,61,30,57,4,7,17,34,43,85,83,45,92,25,89,51,5,7,99,90,98,94,92,85,1,34,88,14,97,70,39,20,90,61,82,38,11,33,98,23,24,34,35,69,59,49,84,86,6,19,77,23,76,60,41,42,66,59,74,90,100,43,11,5,75,31,1,97,75,53,96,12,13,41,24,70,1,14,89,54,15,25,62,52,2,39,92,66,24,60,36,86,54,25,61,86,2,10,17,16,42,94,62,52,4,3,64,23,26,25,72,57,16,17,17,89,22,48,25,43,23,67,83,83,42,83,44,38,4,83,4,86,31,93,24,81,99,79,15,67,34,18,77,62,85,89,43,45,92,30,90,74,2,62,53,27,6,77,83,45,14,79,72,5,100,30,39,44,82,17,88,53,84,8,50,94,24,17,89,41,58,76,38,58,55,76,71,96,41,20,68,12,33,63,29,53,52,30,18,89,85,93,66,32,33,22,46,96,29,22,65,95,45,41,53,65,87,86,23,38,68,73,97,88,45,48,86,66,56,58,14,66,9,40,67,94,16,78,13,80,5,21,77,24,19,6,64,61,34,87,31,88,47,36,41,97,15,98,9,62,74,33,24,56,93,52,11,6,57,74,75,37,50,22,16,86,4,73,89,5,1,69,82,80,22,82,75,96,2,57,11,25,24,33,97,6,26,67,3,51,18,89,56,93,5,36,28,47,17,19,7,20,89,27,37,30,74,75,59,3,3,10,76,46,34,41,92,92,90,24,98,100,52,81,24,55,34,38,5,55,87,20,81,82,81,28,66,7,29,89,48,48,97,88,13,9,17,39,82,100,95,37,26,82,47,19,74,62,6,52,95,68,32,64,82,37,30,48,5,24,23,74,53,46,10,92,70,53,21,2,63,85,92,27,17,63,13,76,24,82,72,13,62,74,52,82,91,7,91,42,19,83,59,70,14,73,97,32,15,43,15,50,51,83,26,15,3,39,23,86,60,82,72,19,88,17,80,38,78,32,45,88,49,39,14,54,20,18,72,98,24,58,87,43,41,17,53,23,25,61,82,40,31,73,75,96,100,4,6,82,4,17,98,99,12,87,45,20,45,21,27,41,64,60,2,13,15,39,29,63,10,79,41,5,98,69,11,61,21,87,84,41,8,17,46,60,95,56,99,75,45,73,93,91,7,5,31,45,46,15,45,17,86,19,35,41,95,28,62,50,86,95,54,38,43,43,74,71,100,29,86,37,36,84,64,44,89,64,80,96,13,92,28,13,65,84,20,63,51,95,50,83,47,91,44,32,52,81,30,7,27,37,31,14,95,7,78,40,31,18,41,51,74,62,32,49,6,20,28,69,86,30,74,53,17,85,34,11,91,64,100,29,6,58,13,16,92,1,29,62,54,21,44};
        System.out.println(LongestPrefix(17, 19, nums));
    }
    public static int LongestPrefix(int X, int Y, int[] nums) {
        if(nums == null || nums.length == 0){
            return -1;
        }
        int cntX = 0;
        int cntY = 0;
        int ans = -1;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == X){
                cntX++;
            }
            if(nums[i] == Y ){
                cntY++;
            }
            if(cntX > 0 && cntY > 0 && cntX == cntY){
                ans = Math.max(ans, i);
            }
        }
        return ans;
    }
}
